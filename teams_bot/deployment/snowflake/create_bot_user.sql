-- Create database and schema
USE ROLE ACCOUNTADMIN;
CREATE DATABASE IF NOT EXISTS TEAMS_BOT_DB;
USE DATABASE TEAMS_BOT_DB;
CREATE SCHEMA IF NOT EXISTS PUBLIC;

-- Create bot role and user
USE ROLE SECURITYADMIN;
CREATE ROLE IF NOT EXISTS TEAMS_BOT_ROLE;
CREATE USER IF NOT EXISTS TEAMS_BOT_USER
  RSA_PUBLIC_KEY = '{{BOT_PUBLIC_KEY}}'
  DEFAULT_ROLE = TEAMS_BOT_ROLE
  MUST_CHANGE_PASSWORD = FALSE;
GRANT ROLE TEAMS_BOT_ROLE TO USER TEAMS_BOT_USER;

-- Grant object permissions
USE ROLE ACCOUNTADMIN;
GRANT USAGE ON WAREHOUSE COMPUTE_WH TO ROLE TEAMS_BOT_ROLE;
GRANT USAGE, CREATE SCHEMA ON DATABASE TEAMS_BOT_DB TO ROLE TEAMS_BOT_ROLE;
GRANT ALL ON SCHEMA PUBLIC TO ROLE TEAMS_BOT_ROLE;
GRANT USAGE ON FUTURE SCHEMAS IN DATABASE TEAMS_BOT_DB TO ROLE TEAMS_BOT_ROLE;
GRANT SELECT ON ALL TABLES IN DATABASE TEAMS_BOT_DB TO ROLE TEAMS_BOT_ROLE;
GRANT SELECT ON FUTURE TABLES IN DATABASE TEAMS_BOT_DB TO ROLE TEAMS_BOT_ROLE;

-- Create key rotation procedure
USE DATABASE TEAMS_BOT_DB;
USE SCHEMA PUBLIC;

CREATE OR REPLACE PROCEDURE ROTATE_BOT_KEY(PUBLIC_KEY STRING)
  RETURNS STRING
  LANGUAGE SQL
  EXECUTE AS CALLER
AS
$$
BEGIN
  ALTER USER TEAMS_BOT_USER SET RSA_PUBLIC_KEY = :PUBLIC_KEY;
  RETURN 'Successfully rotated public key for TEAMS_BOT_USER';
END;
$$;

-- Grant procedure execution
GRANT USAGE ON PROCEDURE ROTATE_BOT_KEY(STRING) TO ROLE TEAMS_BOT_ROLE;

-- Validate setup
SHOW DATABASES LIKE 'TEAMS_BOT_DB';
SHOW USERS LIKE 'TEAMS_BOT_USER';
SHOW ROLES LIKE 'TEAMS_BOT_ROLE';
SHOW GRANTS TO USER TEAMS_BOT_USER; 