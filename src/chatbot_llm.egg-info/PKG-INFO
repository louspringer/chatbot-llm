Metadata-Version: 2.2
Name: chatbot-llm
Version: 0.1.0
Summary: Ontology-driven LLM chatbot framework
Author-email: Lou Springer <lou@louspringer.com>
License: MIT License
        
        Copyright (c) 2024 Lou Springer
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Python: <3.12,>=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: rdflib==7.1.3
Requires-Dist: azure-monitor-opentelemetry==1.0.0
Requires-Dist: requests==2.31.0
Requires-Dist: aiohttp==3.10.11
Requires-Dist: rich==13.7.0
Requires-Dist: click==8.1.7
Requires-Dist: pyyaml==6.0.1
Requires-Dist: toml==0.10.2
Provides-Extra: dev
Requires-Dist: pytest==8.3.4; extra == "dev"
Requires-Dist: pytest-asyncio==0.25.3; extra == "dev"
Requires-Dist: pytest-timeout==2.3.1; extra == "dev"
Requires-Dist: pytest-mock==3.14.0; extra == "dev"
Requires-Dist: pytest-cov==6.0.0; extra == "dev"
Requires-Dist: pytest-env==1.0.1; extra == "dev"
Requires-Dist: pytest-xdist==3.6.1; extra == "dev"

# Snowflake Cortex Teams Bot

A Microsoft Teams bot integration for Snowflake Cortex, enabling seamless data analytics and collaboration within Teams channels.

## Documentation

ðŸ“š [View the full documentation index](docs/index.md) for comprehensive guides, references, and examples.

## Overview and Purpose

The Snowflake Cortex Teams Bot is designed to bridge the gap between Microsoft Teams collaboration and Snowflake's data analytics capabilities. This integration allows teams to:

- Query Snowflake data directly from Teams channels
- Receive automated alerts and insights
- Share and collaborate on data analytics
- Manage data access and permissions seamlessly

## Directory Structure

```
.
â”œâ”€â”€ teams-bot/              # Main bot application
â”‚   â”œâ”€â”€ bot/               # Core bot logic
â”‚   â”œâ”€â”€ handlers/          # Message and event handlers
â”‚   â””â”€â”€ middleware/        # Bot middleware components
â”œâ”€â”€ tools/                 # Development and utility scripts
â”œâ”€â”€ tests/                 # Test suite
â”œâ”€â”€ docs/                  # Documentation
â””â”€â”€ ontologies/           # RDF/OWL ontologies for bot knowledge
```

## Setup Instructions

### Prerequisites

- Python 3.8 or higher
- Conda package manager
- Microsoft Teams development account
- Snowflake account with appropriate permissions

### Environment Setup

1. Create the conda environment:
```bash
conda env create -f environment.yml
conda activate chatbot-llm
```

2. Configure environment variables:
```bash
cp .env.example .env
# Edit .env with your credentials
```

3. Register the bot in Microsoft Teams:
   - Follow the [Microsoft Teams Bot Registration Guide](https://docs.microsoft.com/en-us/microsoftteams/platform/bots/how-to/create-a-bot-for-teams)
   - Add the bot credentials to your `.env` file

### Development Setup

1. Install development dependencies:
```bash
conda install -n chatbot-llm --file requirements-dev.txt
```

2. Set up pre-commit hooks:
```bash
pre-commit install
```

## Development Workflow

1. **Branch Management**
   - Main branch: `main` - production-ready code
   - Development branch: `develop` - integration branch
   - Feature branches: `feature/*` - new features
   - Hotfix branches: `hotfix/*` - urgent fixes

2. **Development Process**
   - Create a feature branch from `develop`
   - Implement changes with tests
   - Submit PR for review
   - Merge to `develop` after approval

3. **Testing**
```bash
# Run unit tests
pytest tests/unit

# Run integration tests
pytest tests/integration

# Run all tests with coverage
pytest --cov=teams-bot tests/
```

## Contribution Guidelines

1. **Code Style**
   - Follow PEP 8 guidelines
   - Use type hints
   - Document functions and classes
   - Keep functions focused and small

2. **Pull Request Process**
   - Create descriptive PR titles
   - Fill out the PR template
   - Include test coverage
   - Link related issues

3. **Commit Messages**
   - Use conventional commits format
   - Reference issues where applicable
   - Keep commits focused and atomic

4. **Documentation**
   - Update README for major changes
   - Document new features
   - Keep API documentation current

## Ontology Integration

The bot uses RDF/OWL ontologies for knowledge representation:

```turtle
@prefix bot: <./chatbot#> .
@prefix snow: <./snowflake#> .
@prefix teams: <./teams#> .

bot:TeamsBot a owl:Class ;
    rdfs:label "Teams Bot" ;
    rdfs:comment "Main bot application class" .
```

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Support

For support and questions:
- Create an issue in the repository
- Contact the development team
- Check the [documentation](docs/)
