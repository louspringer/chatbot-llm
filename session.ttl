@base <./session#> .
@prefix : <./session#> .
@prefix meta: <./meta#> .
@prefix metameta: <./metameta#> .
@prefix problem: <./problem#> .
@prefix solution: <./solution#> .
@prefix conversation: <./conversation#> .
@prefix guidance: <./guidance#> .
@prefix chatbot: <./chatbot#> .
@prefix cortexteams: <./cortexteams#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix session: <./session#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .

# Session Context Management
session:CurrentContext a owl:Class ;
    rdfs:label "Current Session Context" ;
    rdfs:comment "Tracks the active context and relationships for the current session" .

session:hasActiveOntology a owl:ObjectProperty ;
    rdfs:domain session:CurrentContext ;
    rdfs:range owl:Ontology ;
    rdfs:comment "Links to ontologies currently relevant to the session" .

session:hasContextState a owl:ObjectProperty ;
    rdfs:domain session:CurrentContext ;
    rdfs:range session:ContextState ;
    rdfs:comment "Defines the current state of context tracking" .

# Context State
session:ContextState a owl:Class ;
    rdfs:label "Context State" ;
    rdfs:comment "Represents the state of context tracking in the session" .

# Link to existing project ontologies
session:currentSession a session:CurrentContext ;
    session:hasActiveOntology chatbot: ;
    session:hasActiveOntology cortexteams: ;
    session:hasContextState session:initialState .

# Task Management
session:Task a owl:Class ;
    rdfs:label "Task" ;
    rdfs:comment "Represents a specific task or work item in the current session" .

session:TaskStatus a owl:Class ;
    rdfs:label "Task Status" ;
    rdfs:comment "Represents the current status of a task" .

session:hasStatus a owl:ObjectProperty ;
    rdfs:domain session:Task ;
    rdfs:range session:TaskStatus ;
    rdfs:comment "Links a task to its current status" .

session:hasPriority a owl:DatatypeProperty ;
    rdfs:domain session:Task ;
    rdfs:range xsd:integer ;
    rdfs:comment "Priority level of the task (1-5)" .

session:dependsOn a owl:ObjectProperty ;
    rdfs:domain session:Task ;
    rdfs:range session:Task ;
    rdfs:comment "Indicates task dependencies" .

# Task Status Instances
session:Pending a session:TaskStatus ;
    rdfs:label "Pending" .

session:InProgress a session:TaskStatus ;
    rdfs:label "In Progress" .

session:Completed a session:TaskStatus ;
    rdfs:label "Completed" .

session:Blocked a session:TaskStatus ;
    rdfs:label "Blocked" .

# Current Tasks
session:task1 a session:Task ;
    rdfs:label "Teams Bot Integration" ;
    rdfs:comment "Integrate the chatbot with Microsoft Teams platform" ;
    session:hasStatus session:InProgress ;
    session:hasPriority 1 ;
    session:requiresOntology chatbot: ;
    session:requiresOntology cortexteams: .

session:task2 a session:Task ;
    rdfs:label "Context Management Implementation" ;
    rdfs:comment "Implement robust context management in the Teams bot" ;
    session:hasStatus session:Pending ;
    session:hasPriority 2 ;
    session:dependsOn session:task1 .

session:task3 a session:Task ;
    rdfs:label "Security Validation" ;
    rdfs:comment "Validate security requirements and implementations" ;
    session:hasStatus session:Pending ;
    session:hasPriority 1 .

# Current Context State
session:currentContext a session:ContextState ;
    rdfs:label "Current Context" ;
    session:activeTask session:task1 ;
    session:activeOntologies (
        chatbot:ChatbotLLMOntology
        cortexteams:TeamsOntology
    ) ;
    session:securityContext [
        a session:SecurityContext ;
        session:requiresValidation true ;
        session:securityLevel "High"
    ] .

# SHACL Validation
session:TaskShape a sh:NodeShape ;
    sh:targetClass session:Task ;
    sh:property [
        sh:path session:hasStatus ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Task must have exactly one status"
    ] ;
    sh:property [
        sh:path session:hasPriority ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:datatype xsd:integer ;
        sh:minInclusive 1 ;
        sh:maxInclusive 5 ;
        sh:message "Task must have a priority between 1 and 5"
    ] .

# TODO: Add context transition rules
# TODO: Add validation constraints

# Project Definition
session:Project a owl:Class ;
    rdfs:label "Project" ;
    rdfs:comment "Represents the overall project and its goals" .

session:ProjectPhase a owl:Class ;
    rdfs:label "Project Phase" ;
    rdfs:comment "Major phase of project development" .

session:hasPhase a owl:ObjectProperty ;
    rdfs:domain session:Project ;
    rdfs:range session:ProjectPhase .

# Main Project Instance
session:SnowflakeTeamsBot a session:Project ;
    rdfs:label "Snowflake Cortex Teams Bot" ;
    rdfs:comment "Integration of Snowflake Cortex capabilities with Microsoft Teams" ;
    session:hasPhase session:phase1 ;
    session:hasPhase session:phase2 ;
    session:hasPhase session:phase3 ;
    session:hasPhase session:phase4 .

# Project Phases
session:phase1 a session:ProjectPhase ;
    rdfs:label "Core Teams Bot Setup" ;
    session:status session:InProgress ;
    session:tasks (
        [
            a session:Task ;
            rdfs:label "Basic Teams Bot Framework" ;
            rdfs:comment "Set up basic Teams bot infrastructure and message handling" ;
            session:hasStatus session:InProgress ;
            session:hasPriority 1
        ]
        [
            a session:Task ;
            rdfs:label "Bot Authentication" ;
            rdfs:comment "Implement secure authentication for Teams bot" ;
            session:hasStatus session:Pending ;
            session:hasPriority 1
        ]
        [
            a session:Task ;
            rdfs:label "Message Handling" ;
            rdfs:comment "Implement basic message handling and routing" ;
            session:hasStatus session:Pending ;
            session:hasPriority 1
        ]
    ) .

session:phase2 a session:ProjectPhase ;
    rdfs:label "Snowflake Cortex Integration" ;
    session:status session:Pending ;
    session:tasks (
        [
            a session:Task ;
            rdfs:label "Snowflake Connection" ;
            rdfs:comment "Set up secure connection to Snowflake" ;
            session:hasStatus session:Pending ;
            session:hasPriority 2
        ]
        [
            a session:Task ;
            rdfs:label "Query Processing" ;
            rdfs:comment "Implement natural language to SQL processing" ;
            session:hasStatus session:Pending ;
            session:hasPriority 2
        ]
        [
            a session:Task ;
            rdfs:label "Result Formatting" ;
            rdfs:comment "Format query results for Teams display" ;
            session:hasStatus session:Pending ;
            session:hasPriority 2
        ]
    ) .

session:phase3 a session:ProjectPhase ;
    rdfs:label "Advanced Features" ;
    session:status session:Pending ;
    session:tasks (
        [
            a session:Task ;
            rdfs:label "Conversation Context" ;
            rdfs:comment "Implement conversation memory and context tracking" ;
            session:hasStatus session:Pending ;
            session:hasPriority 3
        ]
        [
            a session:Task ;
            rdfs:label "Adaptive Cards" ;
            rdfs:comment "Implement rich Teams Adaptive Cards for interactions" ;
            session:hasStatus session:Pending ;
            session:hasPriority 3
        ]
        [
            a session:Task ;
            rdfs:label "Error Handling" ;
            rdfs:comment "Implement robust error handling and user feedback" ;
            session:hasStatus session:Pending ;
            session:hasPriority 3
        ]
    ) .

session:phase4 a session:ProjectPhase ;
    rdfs:label "Deployment & Security" ;
    session:status session:Pending ;
    session:tasks (
        [
            a session:Task ;
            rdfs:label "Security Audit" ;
            rdfs:comment "Complete security review and implement recommendations" ;
            session:hasStatus session:Pending ;
            session:hasPriority 1
        ]
        [
            a session:Task ;
            rdfs:label "Deployment Pipeline" ;
            rdfs:comment "Set up automated deployment pipeline" ;
            session:hasStatus session:Pending ;
            session:hasPriority 2
        ]
        [
            a session:Task ;
            rdfs:label "Documentation" ;
            rdfs:comment "Complete user and developer documentation" ;
            session:hasStatus session:Pending ;
            session:hasPriority 2
        ]
    ) .

# Add branch naming strategy
session:BranchStrategy a owl:Class ;
    rdfs:label "Branch Strategy" ;
    rdfs:comment "Defines the branch naming and management strategy" .

session:BranchType a owl:Class ;
    rdfs:label "Branch Type" ;
    rdfs:comment "Type of branch (feature, fix, etc.)" .

# Branch Types
session:feature a session:BranchType ;
    rdfs:label "feature" ;
    rdfs:comment "New features and major changes" .

session:fix a session:BranchType ;
    rdfs:label "fix" ;
    rdfs:comment "Bug fixes and minor corrections" .

session:refactor a session:BranchType ;
    rdfs:label "refactor" ;
    rdfs:comment "Code refactoring with Sourcery integration" .

session:experiment a session:BranchType ;
    rdfs:label "experiment" ;
    rdfs:comment "Experimental branches with unknown outcomes" .

# Branch naming pattern
session:BranchNaming a owl:Class ;
    rdfs:label "Branch Naming Pattern" ;
    rdfs:comment "Pattern: <type>/<phase>-<task-name> or experiment/<pioneer>-<adjective>-<concept>" .

# Example branches for each phase
session:phase1Branches a rdf:Seq ;
    rdf:_1 "feature/p1-teams-bot-core" ;
    rdf:_2 "feature/p1-auth-setup" ;
    rdf:_3 "feature/p1-message-handling" .

session:phase2Branches a rdf:Seq ;
    rdf:_1 "feature/p2-snowflake-connect" ;
    rdf:_2 "feature/p2-query-processor" ;
    rdf:_3 "feature/p2-result-format" .

session:phase3Branches a rdf:Seq ;
    rdf:_1 "feature/p3-conversation-context" ;
    rdf:_2 "feature/p3-adaptive-cards" ;
    rdf:_3 "feature/p3-error-handling" .

session:phase4Branches a rdf:Seq ;
    rdf:_1 "feature/p4-security-audit" ;
    rdf:_2 "feature/p4-deployment" ;
    rdf:_3 "feature/p4-docs" .

# Sourcery Integration
session:SourceryConfig a owl:Class ;
    rdfs:label "Sourcery Configuration" ;
    rdfs:comment "Sourcery.ai integration configuration" .

session:sourcerySetup a session:SourceryConfig ;
    rdfs:label "Sourcery Setup" ;
    session:configFile ".sourcery.yaml" ;
    session:autoRefactor true ;
    session:refactorBranchPrefix "refactor/sourcery" .

# Naming theme for experimental branches
session:ExperimentNaming a owl:Class ;
    rdfs:label "Experiment Branch Naming" ;
    rdfs:comment "Docker-style three-tuple naming using AI pioneers theme" .

session:nameComponents a owl:Class ;
    rdfs:subClassOf session:ExperimentNaming .

# Example name components for AI pioneer theme
session:pioneers a rdf:Seq ;
    rdf:_1 "turing" ;
    rdf:_2 "neumann" ;
    rdf:_3 "shannon" ;
    rdf:_4 "minsky" ;
    rdf:_5 "wiener" ;
    rdf:_6 "hinton" ;
    rdf:_7 "bengio" ;
    rdf:_8 "lecun" .

session:adjectives a rdf:Seq ;
    rdf:_1 "curious" ;
    rdf:_2 "quantum" ;
    rdf:_3 "neural" ;
    rdf:_4 "fuzzy" ;
    rdf:_5 "recursive" ;
    rdf:_6 "learning" ;
    rdf:_7 "thinking" ;
    rdf:_8 "dreaming" .

session:concepts a rdf:Seq ;
    rdf:_1 "tensor" ;
    rdf:_2 "matrix" ;
    rdf:_3 "vector" ;
    rdf:_4 "neuron" ;
    rdf:_5 "circuit" ;
    rdf:_6 "network" ;
    rdf:_7 "pattern" ;
    rdf:_8 "graph" .

# Example experimental branch names
session:experimentBranches a rdf:Seq ;
    rdf:_1 "experiment/turing-fuzzy-tensor" ;
    rdf:_2 "experiment/shannon-neural-circuit" ;
    rdf:_3 "experiment/hinton-dreaming-network" .

# Checkpoint Projection
session:CheckpointProjection a owl:Class ;
    rdfs:label "Checkpoint Projection" ;
    rdfs:comment "Information needed to resume work with correct context" .

session:ProjectionComponent a owl:Class ;
    rdfs:label "Projection Component" ;
    rdfs:comment "A component required for context restoration" .

session:hasComponent a owl:ObjectProperty ;
    rdfs:domain session:CheckpointProjection ;
    rdfs:range session:ProjectionComponent ;
    rdfs:comment "Links a checkpoint to its required components" .

session:componentPriority a owl:DatatypeProperty ;
    rdfs:domain session:ProjectionComponent ;
    rdfs:range xsd:integer ;
    rdfs:comment "Priority order for loading components" .

# Current Checkpoint
session:currentCheckpoint a session:CheckpointProjection ;
    rdfs:label "Current Checkpoint" ;
    session:hasPromptState [
        a session:PromptState ;
        session:lastUpdated "2024-03-20T18:10:00Z"^^xsd:dateTime ;
        session:linkedTask :ProjectStructureTask ;
        session:promptVersion "1.2" ;
        session:validationStatus "Valid" ;
        session:taskProgress [
            rdf:_1 "Define directory structure" ;
            rdf:_2 "Document file organization" ;
            rdf:_3 "Specify naming conventions" ;
            rdf:_4 "Create project README"
        ] ;
        session:nextSteps [
            rdf:_1 "Setup Development Environment" ;
            rdf:_2 "Initialize Bot Structure" ;
            rdf:_3 "Implement Core Features"
        ] ;
        session:responseFormat [
            a session:ResponseFormat ;
            session:syntax "turtle" ;
            session:structure "RDF/OWL" ;
            session:validation "SHACL"
        ]
    ] ;
    session:resumptionPrompt """
    Project: Snowflake Cortex Teams Bot
    
    Current Context:
    - Branch: feature/p1-project-planning
    - Issue: #1 Initial Project Structure and Planning
    - Task: Project Structure Definition
    
    Current Status:
    ✓ Directory structure defined and documented
    ✓ File organization patterns established
    ✓ Naming conventions specified
    ✓ Project README completed
    
    Progress Indicators:
    [██████████] 100% Complete
    - Structure Definition: DONE
    - Organization Docs: DONE
    - Naming Rules: DONE
    - README: DONE
    
    Next Steps:
    1. Setup Development Environment
       - Create conda environment
       - Configure dependencies
       - Setup development tools
    
    2. Initialize Bot Structure
       - Core message handling
       - State management
       - Error middleware
    
    3. Implement Core Features
       - Teams integration
       - Snowflake connection
       - Basic commands
    
    Response Format Requirements:
    1. Syntax: Turtle/RDF
    2. Structure: Use RDF/OWL classes and properties
    3. Validation: Include SHACL shapes
    4. Components:
       - Clear class definitions
       - Property relationships
       - Instance examples
       - Validation rules
    """ .

# Validation rules for checkpoints
session:CheckpointShape a sh:NodeShape ;
    sh:targetClass session:CheckpointProjection ;
    sh:property [
        sh:path session:hasComponent ;
        sh:minCount 1 ;
        sh:message "Checkpoint must have at least one component"
    ] ;
    sh:property [
        sh:path session:resumptionPrompt ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Checkpoint must have exactly one resumption prompt"
    ] ;
    sh:property [
        sh:path session:hasPromptState ;
        sh:minCount 1 ;
        sh:message "Checkpoint must have prompt state"
    ] ;
    sh:property [
        sh:path session:promptUpdateTriggers ;
        sh:minCount 1 ;
        sh:message "Must define prompt update triggers"
    ] .

# Add file mapping structure
session:FileMapping a owl:Class ;
    rdfs:label "File Mapping" ;
    rdfs:comment "Maps files to project phases and dependencies" .

session:hasPrimaryPhase a owl:ObjectProperty ;
    rdfs:domain session:FileMapping ;
    rdfs:range session:ProjectPhase ;
    rdfs:comment "Primary phase this file belongs to" .

session:hasSecondaryPhase a owl:ObjectProperty ;
    rdfs:domain session:FileMapping ;
    rdfs:range session:ProjectPhase ;
    rdfs:comment "Secondary phases this file supports" .

session:dependsOn a owl:ObjectProperty ;
    rdfs:domain session:FileMapping ;
    rdfs:range session:FileMapping ;
    rdfs:comment "Files this file depends on" .

session:missingComponents a owl:DatatypeProperty ;
    rdfs:domain session:FileMapping ;
    rdfs:range rdf:List ;
    rdfs:comment "List of missing components for this file" .

# Add refactoring property
session:requiresRefactoring a owl:DatatypeProperty ;
    rdfs:domain session:FileMapping ;
    rdfs:range rdf:List ;
    rdfs:comment "Required refactoring tasks for this file" .

# File Mappings
:TeamsBotMapping a session:FileMapping ;
    rdfs:label "teams_bot.py" ;
    session:hasPrimaryPhase session:phase1 ;
    session:hasSecondaryPhase session:phase3 ;
    session:dependsOn [
        rdf:_1 "botbuilder.core" ;
        rdf:_2 "logging"
    ] ;
    session:missingComponents [
        rdf:_1 "Error handling middleware" ;
        rdf:_2 "Adaptive card templates" ;
        rdf:_3 "Conversation state management implementation"
    ] ;
    session:requiresRefactoring [
        rdf:_1 "Convert to async/await pattern throughout" ;
        rdf:_2 "Add type hints to all methods" ;
        rdf:_3 "Extract message handling to separate class" ;
        rdf:_4 "Add proper logging configuration"
    ] .

:DeploymentMapping a session:FileMapping ;
    rdfs:label "deployment_instance.ttl" ;
    session:hasPrimaryPhase session:phase4 ;
    session:hasSecondaryPhase session:phase1 ;
    session:dependsOn [
        rdf:_1 "chatbot.ttl" ;
        rdf:_2 "Azure Function configuration"
    ] ;
    session:missingComponents [
        rdf:_1 "Actual Azure Function configuration files" ;
        rdf:_2 "Environment variable templates" ;
        rdf:_3 "Deployment scripts"
    ] ;
    session:requiresRefactoring [
        rdf:_1 "Split into separate files for each deployment component" ;
        rdf:_2 "Add SHACL validation rules" ;
        rdf:_3 "Link with Azure Function configuration"
    ] .

:ChatbotMapping a session:FileMapping ;
    rdfs:label "chatbot.ttl" ;
    session:hasPrimaryPhase session:phase1 ;
    session:hasSecondaryPhase session:phase2 ;
    session:hasSecondaryPhase session:phase3 ;
    session:dependsOn [
        rdf:_1 "meta.ttl" ;
        rdf:_2 "metameta.ttl" ;
        rdf:_3 "guidance.ttl"
    ] ;
    session:missingComponents [
        rdf:_1 "Complete solution space modeling" ;
        rdf:_2 "Detailed use case scenarios" ;
        rdf:_3 "Risk monitoring implementation"
    ] ;
    session:requiresRefactoring [
        rdf:_1 "Add missing class relationships" ;
        rdf:_2 "Complete SHACL validation rules" ;
        rdf:_3 "Link with Snowflake Cortex ontology"
    ] .

:CortexTeamsMapping a session:FileMapping ;
    rdfs:label "cortexteams.ttl" ;
    session:hasPrimaryPhase session:phase2 ;
    session:hasSecondaryPhase session:phase1 ;
    session:hasSecondaryPhase session:phase3 ;
    session:dependsOn [
        rdf:_1 "chatbot.ttl"
    ] ;
    session:missingComponents [
        rdf:_1 "Actual Snowflake Cortex integration code" ;
        rdf:_2 "Query processing implementation" ;
        rdf:_3 "Data transformation templates"
    ] ;
    session:requiresRefactoring [
        rdf:_1 "Add query processing workflow details" ;
        rdf:_2 "Define data transformation rules" ;
        rdf:_3 "Add security constraint definitions"
    ] .

:DebugEnvMapping a session:FileMapping ;
    rdfs:label "debug_python_env.py" ;
    session:hasPrimaryPhase session:phase1 ;
    session:hasSecondaryPhase session:phase4 ;
    session:dependsOn [
        rdf:_1 "sys" ;
        rdf:_2 "site" ;
        rdf:_3 "os"
    ] ;
    session:missingComponents [
        rdf:_1 "Integration with deployment pipeline" ;
        rdf:_2 "Environment validation checks" ;
        rdf:_3 "Production environment configuration"
    ] ;
    session:requiresRefactoring [
        rdf:_1 "Add configuration file handling" ;
        rdf:_2 "Implement proper error reporting" ;
        rdf:_3 "Add environment validation methods"
    ] .

# Update validation shape to require refactoring
session:FileMappingResponseShape 
    sh:property [
        sh:path session:hasPrimaryPhase ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Must have exactly one primary phase"
    ] ;
    sh:property [
        sh:path session:dependsOn ;
        sh:minCount 1 ;
        sh:message "Must have at least one dependency"
    ] ;
    sh:property [
        sh:path session:missingComponents ;
        sh:minCount 1 ;
        sh:message "Must have at least one missing component"
    ] ;
    sh:property [
        sh:path session:requiresRefactoring ;
        sh:minCount 1 ;
        sh:message "Must specify required refactoring tasks"
    ] .

# Next Steps Planning
:NextStepsMapping a session:PlanningPhase ;
    rdfs:label "Next Steps for Project Structure" ;
    session:hasStep [
        rdf:_1 [
            a session:Step ;
            rdfs:label "Setup Development Environment" ;
            session:priority 1 ;
            session:targetFile "debug_python_env.py" ;
            session:requirements [
                rdf:_1 "Create conda environment.yml" ;
                rdf:_2 "Add botbuilder-core dependencies" ;
                rdf:_3 "Configure development settings"
            ]
        ] ;
        rdf:_2 [
            a session:Step ;
            rdfs:label "Implement Core Bot Structure" ;
            session:priority 2 ;
            session:targetFile "teams-bot/bot/teams_bot.py" ;
            session:requirements [
                rdf:_1 "Add error handling middleware" ;
                rdf:_2 "Implement conversation state" ;
                rdf:_3 "Create adaptive card templates"
            ]
        ] ;
        rdf:_3 [
            a session:Step ;
            rdfs:label "Setup Deployment Configuration" ;
            session:priority 3 ;
            session:targetFile "teams-bot/deployment_instance.ttl" ;
            session:requirements [
                rdf:_1 "Create Azure Function configuration" ;
                rdf:_2 "Setup environment templates" ;
                rdf:_3 "Initialize deployment scripts"
            ]
        ]
    ] .

:CurrentPriority a session:PriorityTask ;
    rdfs:label "Current Priority Task" ;
    session:taskFile "debug_python_env.py" ;
    session:taskPhase session:phase1 ;
    session:taskStatus "Pending" ;
    session:nextAction "Create conda environment.yml" ;
    session:blockingIssues [
        rdf:_1 "Missing dependency specifications" ;
        rdf:_2 "Undefined Python version requirements"
    ] .

# Update completed task status
:FileAnalysisTask a session:Task ;
    rdfs:label "File Analysis and Phase Mapping" ;
    rdfs:comment "Map files to phases, identify dependencies and refactoring needs" ;
    session:hasStatus session:Completed ;
    session:hasPriority 1 ;
    session:completedSteps [
        rdf:_1 "Map each file to project phase" ;
        rdf:_2 "Identify missing components" ;
        rdf:_3 "Document file dependencies" ;
        rdf:_4 "Note required refactoring"
    ] ;
    session:completionDate "2024-03-20"^^xsd:date .

# Next task in Issue #1
:ProjectStructureTask a session:Task ;
    rdfs:label "Project Structure Definition" ;
    rdfs:comment "Define and document the project structure and organization" ;
    session:hasStatus session:Completed ;
    session:hasPriority 1 ;
    session:dependsOn :FileAnalysisTask ;
    session:requiredSteps [
        rdf:_1 "Define directory structure" ;
        rdf:_2 "Document file organization" ;
        rdf:_3 "Specify naming conventions" ;
        rdf:_4 "Create project README"
    ] ;
    session:blockingIssues [] ;
    session:requiresPromptUpdate false ;
    session:completedSteps [
        rdf:_1 "Define directory structure" ;
        rdf:_2 "Document file organization" ;
        rdf:_3 "Specify naming conventions" ;
        rdf:_4 "Create project README"
    ] ;
    session:completionDate "2024-03-20"^^xsd:date .

# Project Structure Definition
:RootStructure a session:DirectoryStructure ;
    rdfs:label "Root Project Structure" ;
    session:hasDirectory [
        rdf:_1 [
            rdfs:label "teams-bot" ;
            rdfs:comment "Core Teams bot implementation" ;
            session:contains [
                rdf:_1 "bot/" ;
                rdf:_2 "tests/" ;
                rdf:_3 "config/" ;
                rdf:_4 "deployment/"
            ] ;
            session:purpose "Contains all Teams bot related code and configuration"
        ] ;
        rdf:_2 [
            rdfs:label "ontology" ;
            rdfs:comment "Core ontology files" ;
            session:contains [
                rdf:_1 "meta.ttl" ;
                rdf:_2 "metameta.ttl" ;
                rdf:_3 "problem.ttl" ;
                rdf:_4 "solution.ttl" ;
                rdf:_5 "conversation.ttl" ;
                rdf:_6 "guidance.ttl"
            ] ;
            session:purpose "Defines core ontological concepts and relationships"
        ] ;
        rdf:_3 [
            rdfs:label "tools" ;
            rdfs:comment "Development and utility tools" ;
            session:contains [
                rdf:_1 "get_checkpoint.py" ;
                rdf:_2 "debug_python_env.py" ;
                rdf:_3 "validate_ontology.py"
            ] ;
            session:purpose "Contains development utilities and helper scripts"
        ] ;
        rdf:_4 [
            rdfs:label "docs" ;
            rdfs:comment "Project documentation" ;
            session:contains [
                rdf:_1 "README.md" ;
                rdf:_2 "CONTRIBUTING.md" ;
                rdf:_3 "architecture/" ;
                rdf:_4 "api/"
            ] ;
            session:purpose "Project documentation and guides"
        ]
    ] .

:TeamsSubStructure a session:DirectoryStructure ;
    rdfs:label "Teams Bot Substructure" ;
    session:parentDirectory "teams-bot" ;
    session:hasDirectory [
        rdf:_1 [
            rdfs:label "bot" ;
            rdfs:comment "Core bot implementation" ;
            session:contains [
                rdf:_1 "teams_bot.py" ;
                rdf:_2 "message_handler.py" ;
                rdf:_3 "state_manager.py" ;
                rdf:_4 "cortex_client.py"
            ]
        ] ;
        rdf:_2 [
            rdfs:label "tests" ;
            rdfs:comment "Test suite" ;
            session:contains [
                rdf:_1 "unit/" ;
                rdf:_2 "integration/" ;
                rdf:_3 "fixtures/"
            ]
        ] ;
        rdf:_3 [
            rdfs:label "config" ;
            rdfs:comment "Configuration files" ;
            session:contains [
                rdf:_1 "settings.py" ;
                rdf:_2 "logging.conf" ;
                rdf:_3 ".env.template"
            ]
        ] ;
        rdf:_4 [
            rdfs:label "deployment" ;
            rdfs:comment "Deployment configuration" ;
            session:contains [
                rdf:_1 "deployment_instance.ttl" ;
                rdf:_2 "azure_function.json" ;
                rdf:_3 "requirements.txt"
            ]
        ]
    ] .

# Naming Conventions
:NamingConventions a session:ConventionSet ;
    rdfs:label "Project Naming Conventions" ;
    session:hasConvention [
        rdf:_1 [
            rdfs:label "Python Files" ;
            session:pattern "snake_case.py" ;
            session:example "teams_bot.py" ;
            session:applies "*.py"
        ] ;
        rdf:_2 [
            rdfs:label "Ontology Files" ;
            session:pattern "lowercase.ttl" ;
            session:example "chatbot.ttl" ;
            session:applies "*.ttl"
        ] ;
        rdf:_3 [
            rdfs:label "Test Files" ;
            session:pattern "test_*.py" ;
            session:example "test_teams_bot.py" ;
            session:applies "tests/**/*.py"
        ] ;
        rdf:_4 [
            rdfs:label "Configuration Files" ;
            session:pattern "lowercase.*" ;
            session:example "settings.py" ;
            session:applies "config/*"
        ] ;
        rdf:_5 [
            rdfs:label "Documentation Files" ;
            session:pattern "UPPERCASE.md" ;
            session:example "README.md" ;
            session:applies "docs/*.md"
        ]
    ] .

# Checkpoint Prompt Management
session:CheckpointPrompt a owl:Class ;
    rdfs:label "Checkpoint Prompt" ;
    rdfs:comment "Manages and validates checkpoint prompts" .

session:PromptState a owl:Class ;
    rdfs:label "Prompt State" ;
    rdfs:comment "Tracks the state of a checkpoint prompt" .

session:hasPromptState a owl:ObjectProperty ;
    rdfs:domain session:CheckpointProjection ;
    rdfs:range session:PromptState ;
    rdfs:comment "Links a checkpoint to its prompt state" .

session:requiresPromptUpdate a owl:DatatypeProperty ;
    rdfs:domain session:Task ;
    rdfs:range xsd:boolean ;
    rdfs:comment "Indicates if a task requires a prompt update" .

# Prompt Validation Shape
session:CheckpointPromptShape a sh:NodeShape ;
    sh:targetClass session:CheckpointPrompt ;
    sh:property [
        sh:path session:taskReference ;
        sh:minCount 1 ;
        sh:message "Prompt must reference current task"
    ] ;
    sh:property [
        sh:path session:taskProgress ;
        sh:minCount 1 ;
        sh:message "Prompt must include task progress"
    ] ;
    sh:property [
        sh:path session:responseFormat ;
        sh:minCount 1 ;
        sh:message "Prompt must specify response format"
    ] .

# Task-Prompt Linkage
:ProjectStructureTask 
    session:requiresPromptUpdate false ;
    session:promptRequirements [
        rdf:_1 "Current task status" ;
        rdf:_2 "Progress indicators" ;
        rdf:_3 "Next steps" ;
        rdf:_4 "Response format"
    ] .

# Add prompt update trigger
session:PromptUpdateTrigger a owl:Class ;
    rdfs:label "Prompt Update Trigger" ;
    rdfs:comment "Defines conditions that require prompt updates" .

:TaskStateChange a session:PromptUpdateTrigger ;
    rdfs:label "Task State Change" ;
    session:triggers session:promptUpdate ;
    session:updateRequirements [
        rdf:_1 "Update task reference" ;
        rdf:_2 "Update progress status" ;
        rdf:_3 "Update next steps" ;
        rdf:_4 "Validate format"
    ] . 